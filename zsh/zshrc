: "一般的な設定" && {
#  autoload -U compinit && compinit -d ${COMPDUMPFILE} # 補完機能の強化
  autoload -Uz compinit && compinit # 補完機能の強化
  setopt correct # 入力しているコマンド名が間違っている場合にもしかして：を出す。
  setopt nobeep # ビープを鳴らさない
  setopt no_tify # バックグラウンドジョブが終了したらすぐに知らせる。
  unsetopt auto_menu # タブによるファイルの順番切り替えをしない
  setopt auto_pushd # cd -[tab]で過去のディレクトリにひとっ飛びできるようにする
  setopt pushd_ignore_dups # pushd したとき、ディレクトリがすでにスタックに含まれていればスタックに追加しない
  setopt auto_cd # ディレクトリ名を入力するだけでcdできるようにする
  setopt interactive_comments # コマンドラインでも # 以降をコメントと見なす

  # 拡張 glob を有効にする
  # glob とはパス名にマッチするワイルドカードパターンのこと
  # （たとえば `mv hoge.* ~/dir` における "*"）
  # 拡張 glob を有効にすると # ~ ^ もパターンとして扱われる
  # どういう意味を持つかは `man zshexpn` の FILENAME GENERATION を参照
  setopt extended_glob
}

: "ヒストリ関連の設定" && {
  HISTFILE=~/.zsh_history
  HISTSIZE=2000 # メモリに保存される履歴の件数
  SAVEHIST=100000 # 履歴ファイルに保存される履歴の件数
  setopt hist_ignore_dups # 直前と同じコマンドをヒストリに追加しない
  setopt hist_ignore_all_dups # 重複するコマンドは古い法を削除する
  setopt share_history # 異なるウィンドウでコマンドヒストリを共有する
  setopt hist_no_store # historyコマンドは履歴に登録しない
  setopt hist_reduce_blanks # 余分な空白は詰めて記録
  setopt hist_verify # `!!`を実行したときにいきなり実行せずコマンドを見せる
  setopt extended_history # ヒストリに実行時間も保存
}

: "キーバインディング" && {
  bindkey -e # emacs キーマップを選択
  : "Ctrl-Yで上のディレクトリに移動できる" && {
    function cd-up { zle push-line && LBUFFER='builtin cd ..' && zle accept-line }
    zle -N cd-up
    bindkey "^Y" cd-up
  }
  : "Ctrl-Dでシェルからログアウトしない" && {
#    setopt ignoreeof
  }
  : "Ctrl-Wでパスの文字列などをスラッシュ単位でdeleteできる" && {
    autoload -U select-word-style
    select-word-style bash
  }
  : "Ctrl-[で直前コマンドの単語を挿入できる" && {
    autoload -Uz smart-insert-last-word
    zstyle :insert-last-word match '*([[:alpha:]/\\]?|?[[:alpha:]/\\])*' # [a-zA-Z], /, \ のうち少なくとも1文字を含む長さ2以上の単語
    zle -N insert-last-word smart-insert-last-word
    bindkey '^[' insert-last-word
    # see http://qiita.com/mollifier/items/1a9126b2200bcbaf515f
  }
  : "<Tab> を押すと候補からパス名を選択できるようになる" && {
    # <Tab> でパス名の補完候補を表示したあと、
    # 続けて <Tab> を押すと候補からパス名を選択できるようになる
    # 候補を選ぶには <Tab> か Ctrl-N,B,F,P
    zstyle ':completion:*:default' menu select=1
  }
  : "単語の一部として扱われる文字のセットを指定する" && {
    # デフォルトのセットから / を抜いたものとする
    # こうすると、 Ctrl-W でカーソル前の1単語を削除したとき、 / までで削除が止まる
    WORDCHARS='*?_-.[]~=&;!#$%^(){}<>'
  }
  : "補完候補のメニュー選択で、矢印キーの代わりにhjklで移動出来るようにする" && {
    zmodload zsh/complist
    bindkey -M menuselect 'h' vi-backward-char
    bindkey -M menuselect 'j' vi-down-line-or-history
    bindkey -M menuselect 'k' vi-up-line-or-history
    bindkey -M menuselect 'l' vi-forward-char
  }
  : "コマンドを途中まで入力後、historyから絞り込み" && {
    # 例 ls まで打ってCtrl+pでlsコマンドをさかのぼる、Ctrl+bで逆順
    autoload -Uz history-search-end
    zle -N history-beginning-search-backward-end history-search-end
    zle -N history-beginning-search-forward-end history-search-end
    bindkey "^p" history-beginning-search-backward-end
    bindkey "^b" history-beginning-search-forward-end
  }
  
}

: "プラグイン" && {
  export ZPLUG_HOME=/usr/local/opt/zplug
  [ -f "$ZPLUG_HOME/init.zsh" ] || brew install zplug # zplugはHomebrewからインストール
  source $ZPLUG_HOME/init.zsh
  zplug "zsh-users/zsh-completions" # 多くのコマンドに対応する入力補完 … https://github.com/zsh-users/zsh-completions
#  zplug "mafredri/zsh-async" # "sindresorhus/pure"が依存している
#  zplug "sindresorhus/pure", use:pure.zsh, as:theme # 美しく最小限で高速なプロンプト … https://github.com/sindresorhus/pure
  zplug 'iplaces/astro-zsh-theme', as:theme # theme (https://github.com/iplaces/astro-zsh-theme/blob/master/README.md)
  zplug "zsh-users/zsh-syntax-highlighting", defer:2 # fishシェル風のシンタクスハイライト … https://github.com/zsh-users/zsh-syntax-highlighting
  zplug "supercrabtree/k" # git情報を含んだファイルリストを表示するコマンド … https://github.com/supercrabtree/k
  zplug "junegunn/fzf-bin", as:command, from:gh-r, rename-to:fzf # あいまい検索ができるコマンド … https://github.com/junegunn/fzf
  zplug "junegunn/fzf", as:command, use:bin/fzf-tmux # tmuxでfzfを使えるようにするプラグイン
  zplug "junegunn/fzf", use:shell/key-bindings.zsh # Ctrl-Rで履歴検索、Ctrl-Tでファイル名検索補完できる
  zplug "junegunn/fzf", use:shell/completion.zsh # cd **[TAB], vim **[TAB]などでファイル名を補完できる
  zplug "b4b4r07/enhancd", use:init.sh # cdコマンドをインタラクティブにするプラグイン … https://github.com/b4b4r07/enhancd
  zplug 'b4b4r07/gomi', as:command, from:gh-r # 消したファイルをゴミ箱から復元できるrmコマンド代替 … https://github.com/b4b4r07/gomi
  zplug 'direnv/direnv' # ディレクトリ毎に環境変数を定義し、カレントになった時だけ環境変数を有効にしてくれる … https://github.com/direnv/direnv
  zplug "momo-lab/zsh-abbrev-alias" # 略語展開(iab)を設定するためのプラグイン … http://qiita.com/momo-lab/items/b1b1afee313e42ba687b
  zplug "paulirish/git-open", as:plugin # GitHub, GitLab, BitBucketを開けるようにするコマンド … https://github.com/paulirish/git-open
  zplug check || zplug install
  zplug load
}

: "略語展開(iab)" && {
  : "exaが導入済みならlsの代わりにexaを使う" && {
      type exa > /dev/null && {
        abbrev-alias ls="exa"
        abbrev-alias ll="exa -l"
        abbrev-alias la="exa -alhg --group-directories-first --git --time-style long-iso"
        abbrev-alias lr="exa -lr"
        abbrev-alias l1="exa -1"
      } || {
        #######################################
        # OS 別の設定
        case ${OSTYPE} in
            darwin*)
                #Mac用の設定
                export CLICOLOR=1
                abbrev-alias ls='ls -G -F'
                abbrev-alias la='ls -laG'
                abbrev-alias ll='ls -lG'
                abbrev-alias lr='ls -ltrG'
                abbrev-alias l1='ls -1G'
                ;;
            linux*)
                #Linux用の設定
                alias ls='ls -F --color=auto'
                alias la='ls -la --color=auto'
                alias ll='ls -l --color=auto'
                alias lr='ls -ltr --color=auto'
                alias l1='ls -1 --color=auto'
                ;;
        esac
      }
  }
  abbrev-alias tree="tree -NC" # N: 文字化け対策, C:色をつける
  abbrev-alias gpl="git pull"
  abbrev-alias gps="git push"
  abbrev-alias gco="git commit -av"
  abbrev-alias ga="git add -A"
  abbrev-alias gs="git status -s"
  abbrev-alias dp="docker ps"
  abbrev-alias di="docker images"
  abbrev-alias dce="docker-compose exec"
  abbrev-alias edi="eval \$(dinghy env)"
  abbrev-alias -g a1="awk '{print \$1}'"
  abbrev-alias -g a2="awk '{print \$2}'"
  abbrev-alias -g a3="awk '{print \$3}'"
  abbrev-alias -g a4="awk '{print \$4}'"
  abbrev-alias -g a5="awk '{print \$5}'"
  abbrev-alias -g a6="awk '{print \$6}'"
  abbrev-alias -g a7="awk '{print \$7}'"
  abbrev-alias -g a8="awk '{print \$8}'"
  abbrev-alias -g a9="awk '{print \$9}'"
  abbrev-alias -g a10="awk '{print \$10}'"
  abbrev-alias -g a11="awk '{print \$11}'"
  abbrev-alias -g a12="awk '{print \$12}'"
  abbrev-alias -g a13="awk '{print \$13}'"
  abbrev-alias -g a14="awk '{print \$14}'"
  abbrev-alias -g a15="awk '{print \$15}'"
  abbrev-alias -g a16="awk '{print \$16}'"
  abbrev-alias -g and="|" # パイプが遠いのでandを割り当てる。例えば`tail -f ./log | grep error`を`tail -f ./log and grep error`と書くことができる
}

: "" && {
  # cdrコマンドを有効 ログアウトしても有効なディレクトリ履歴
  # cdr タブでリストを表示
  autoload -Uz add-zsh-hook
  autoload -Uz chpwd_recent_dirs cdr
  add-zsh-hook chpwd chpwd_recent_dirs
  # cdrコマンドで履歴にないディレクトリにも移動可能に
  zstyle ":chpwd:*" recent-dirs-default true
}
: "コマンド" && {
  # 複数ファイルのmv 例　zmv *.txt *.txt.bk
  autoload -Uz zmv
  alias zmv='noglob zmv -W'
}

: "cd先のディレクトリのファイル一覧を表示する" && {
  [ -z "$ENHANCD_ROOT" ] && function chpwd { tree -L 1 } # enhancdがない場合
  [ -z "$ENHANCD_ROOT" ] || export ENHANCD_HOOK_AFTER_CD="tree -L 1" # enhancdがあるときはそのHook機構を使う
}

: "sshコマンド補完を~/.ssh/configから行う" && {
#  function _ssh { compadd $(fgrep 'Host ' ~/.ssh/*/config | grep -v '*' |  awk '{print $2}' | sort) }
}

# added by travis gem
#[ -f /Users/suin/.travis/travis.sh ] && source /Users/suin/.travis/travis.sh

: "direnv" && {
  type direnv > /dev/null && eval "$(direnv hook zsh)"
}

: "anyenv" && {
  if [ -d "${ANYENV_ROOT}" ]; then
    eval "$(anyenv init -)"
  fi
}

#tmux
function tm() { 
       if [ -n "${1}" ]; then
           tmux attach-session -t ${1} || \
           tmux new-session -s ${1}
    else
           tmux attach-session || \
           tmux new-session
       fi
}

# tabtab source for yarn package
# uninstall by removing these lines or running `tabtab uninstall yarn`
#[[ -f /Users/suin/Dropbox/open/dotfiles/.config/yarn/global/node_modules/yarn-completions/node_modules/tabtab/.completions/yarn.zsh ]] && . /Users/suin/Dropbox/open/dotfiles/.config/yarn/global/node_modules/yarn-completions/node_modules/tabtab/.completions/yarn.zsh

: "zshrcのコンパイル" && {
  # 初回は手動でzcompileする事
  if [ ~/.zshrc -nt ~/.zshrc.zwc ]; then
    zcompile ~/.zshrc
  fi
}

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="/Users/toshis/.sdkman"
[[ -s "/Users/toshis/.sdkman/bin/sdkman-init.sh" ]] && source "/Users/toshis/.sdkman/bin/sdkman-init.sh"
